{"version":3,"file":"static/js/966.5bf3c8e4.chunk.js","mappings":"0KACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,4B,mBCkB7K,EAVmB,SAACA,GAChB,IAAIC,EAAe,YAAcD,EAAME,GACvC,OACI,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCGtC,EANoB,SAACN,GACjB,OAAO,gBAAKG,UAAWC,EAAAA,QAAhB,SAA4BJ,EAAMO,W,uCCNvCC,GAAeC,EAAAA,EAAAA,GAAiB,KAqBtC,GAAeC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA9C,EAnBuB,SAACX,GACpB,OAAO,kBAAMY,SAAUZ,EAAMa,aAAtB,WACH,0BACI,SAACC,EAAA,EAAD,CACIR,KAAK,iBACLS,UAAWC,EAAAA,EACXC,YAAY,qBACZC,SAAU,CAACC,EAAAA,EAAUX,QAE7B,0BACI,oDC6BZ,EA3BgB,SAACR,GACb,IAAIoB,EAAQpB,EAAMqB,YACdC,EAAmBF,EAAMG,aAAaC,KAAI,SAACC,GAC3C,OAAO,SAAC,EAAD,CAAavB,GAAIuB,EAAKvB,GAAIK,QAASkB,EAAKlB,aAG/CmB,EAAiBN,EAAMO,YAAYH,KAAI,SAACC,GACxC,OAAO,SAAC,EAAD,CAAYnB,KAAMmB,EAAKnB,KAAMJ,GAAIuB,EAAKvB,QAOjD,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKsB,KAEL,gBAAKvB,UAAWC,EAAAA,SAAhB,SACKkB,KAEL,SAAC,EAAD,CAAgBV,SAZF,SAACgB,GACnB5B,EAAM6B,YAAYD,EAAOE,uB,oDCxB3BC,EAAkB,SAACX,GAAD,MAAiC,CACrDY,OAAQZ,EAAMa,KAAKD,S,ICkBvB,GAAeE,E,QAAAA,KACXC,EAAAA,EAAAA,KAjBkB,SAACf,GACnB,MAAO,CACHC,YAAaD,EAAMC,YACnBW,OAAQZ,EAAMa,KAAKD,WAIF,SAACI,GACtB,MAAO,CACHP,YAAa,SAACC,GACVM,GAASC,EAAAA,EAAAA,GAAyBP,SAQ1CQ,EAAAA,IDbG,SAA6BC,GAOhC,OAAOJ,EAAAA,EAAAA,IAAuCJ,EAAiB,GAAxDI,EAL4C,SAACnC,GAChD,IAAKgC,EAAwBhC,EAAxBgC,OAAWQ,GAAhB,OAA6BxC,EAA7B,GACA,OAAKgC,GACE,SAACO,GAAD,UAAgBC,KADH,SAAC,KAAD,CAAUnC,GAAG,gBCOzC,CAIEoC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/MessageItem.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ghQf0\",\"dialogsItems\":\"Dialogs_dialogsItems__Aa02M\",\"active\":\"Dialogs_active__rfolC\",\"dialog\":\"Dialogs_dialog__2ll2O\",\"messages\":\"Dialogs_messages__yFH8g\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\n\r\nexport type DialogsItemPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nconst DialogItem = (props: DialogsItemPropsType) => {\r\n    let path: string = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\n\r\nexport type MessagePropsType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst MessageItem = (props: MessagePropsType) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\n\r\n\r\nexport default MessageItem;","import {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../common/FormsControls/FormControls';\r\nimport React from 'react';\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field\r\n                name='newMessageBody'\r\n                component={Textarea}\r\n                placeholder='Enter your message'\r\n                validate={[required, maxLength100]}/>\r\n        </div>\r\n        <div>\r\n            <button>SendMessage</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport default reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogsItemPropsType} from './DialogItem/DialogsItem';\r\nimport {MessagePropsType} from './Message/MessageItem';\r\nimport DialogItem from './DialogItem/DialogsItem';\r\nimport MessageItem from './Message/MessageItem';\r\nimport {DialogsPageType} from '../../Redux/dialogsReducer';\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\r\n\r\nexport type DialogsPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\nexport type DialogPropsType = Array<DialogsItemPropsType>;\r\n\r\nexport type MessagesPropsType = Array<MessagePropsType>;\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let state = props.dialogsPage;\r\n    let messagesElements = state.messagesData.map((item) => {\r\n        return <MessageItem id={item.id} message={item.message}/>\r\n    });\r\n\r\n    let dialogElements = state.dialogsData.map((item) => {\r\n        return <DialogItem name={item.name} id={item.id}/>\r\n    });\r\n\r\n    const addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n    // if(!props.isAuth) return <Redirect to={'/login'}/>\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {GetStateType} from '../Redux/redux-store';\r\n\r\n\r\nconst mapStateToProps = (state: GetStateType): MSTPT => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\ntype MSTPT = {\r\n    isAuth: boolean\r\n}\r\ntype MDTPT = {}\r\n\r\nexport function withAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n\r\n    const RedirectComponent: React.FC<MSTPT & MDTPT> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return <Component  {...restProps as T} />\r\n    }\r\n    return connect<MSTPT, MDTPT, T, GetStateType>(mapStateToProps, {})(RedirectComponent)\r\n}\r\n\r\n","import React from 'react';\r\nimport {sendMessageActionCreator} from '../../Redux/dialogsReducer';\r\nimport Dialogs from './Dialogs';\r\nimport {GetStateType} from '../../Redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {withAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {compose, Dispatch} from 'redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nlet mapStateToProps = (state: GetStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(Dialogs);"],"names":["props","path","id","className","s","to","name","message","maxLength100","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","state","dialogsPage","messagesElements","messagesData","map","item","dialogElements","dialogsData","values","sendMessage","newMessageBody","mapStateToProps","isAuth","auth","compose","connect","dispatch","sendMessageActionCreator","withRouter","Component","restProps","Dialogs"],"sourceRoot":""}